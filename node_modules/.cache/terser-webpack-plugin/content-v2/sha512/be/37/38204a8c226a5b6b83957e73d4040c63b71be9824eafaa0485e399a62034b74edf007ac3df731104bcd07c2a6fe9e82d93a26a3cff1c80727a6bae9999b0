{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[2937],{3143:function(t,e,r){\"use strict\";r.r(e);var o=r(0),a=Object(o.a)({},(function(){var t=this,e=t.$createElement,r=t._self._c||e;return r(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":t.$parent.slotKey}},[r(\"h1\",{attrs:{id:\"gridnav\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#gridnav\"}},[t._v(\"#\")]),t._v(\" GridNav\")]),t._v(\" \"),r(\"p\",[t._v(\"extends \"),r(\"a\",{attrs:{href:\"../GridNav\"}},[t._v(\"GridNav\")])]),t._v(\" \"),r(\"table\",[r(\"thead\",[r(\"tr\",[r(\"th\",[t._v(\"Function\")]),t._v(\" \"),r(\"th\",[t._v(\"Description\")]),t._v(\" \"),r(\"th\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"Client\")])])]),t._v(\" \"),r(\"tbody\",[r(\"tr\",[r(\"td\",[r(\"a\",{attrs:{href:\"CanFindPath\"}},[t._v(\"bool CanFindPath(Vector_1, Vector_2)\")])]),t._v(\" \"),r(\"td\",[t._v(\"Determine if it is possible to reach the specified end point from the specified start point. bool (vStart, vEnd)\")]),t._v(\" \"),r(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"❌\")])]),t._v(\" \"),r(\"tr\",[r(\"td\",[r(\"a\",{attrs:{href:\"DestroyTreesAroundPoint\"}},[t._v(\"void DestroyTreesAroundPoint(Vector_1, float_2, bool_3)\")])]),t._v(\" \"),r(\"td\",[t._v(\"Destroy all trees in the area(vPosition, flRadius, bFullCollision\")]),t._v(\" \"),r(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"❌\")])]),t._v(\" \"),r(\"tr\",[r(\"td\",[r(\"a\",{attrs:{href:\"FindPathLength\"}},[t._v(\"float FindPathLength(Vector_1, Vector_2)\")])]),t._v(\" \"),r(\"td\",[t._v(\"Find a path between the two points an return the length of the path. If there is not a path between the points the returned value will be -1. float (vStart, vEnd )\")]),t._v(\" \"),r(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"❌\")])]),t._v(\" \"),r(\"tr\",[r(\"td\",[r(\"a\",{attrs:{href:\"GetAllTreesAroundPoint\"}},[t._v(\"table GetAllTreesAroundPoint(Vector_1, float_2, bool_3)\")])]),t._v(\" \"),r(\"td\",[t._v(\"Returns a table full of tree HSCRIPTS (vPosition, flRadius, bFullCollision).\")]),t._v(\" \"),r(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"❌\")])]),t._v(\" \"),r(\"tr\",[r(\"td\",[r(\"a\",{attrs:{href:\"GridPosToWorldCenterX\"}},[t._v(\"float GridPosToWorldCenterX(int_1)\")])]),t._v(\" \"),r(\"td\",[t._v(\"Get the X position of the center of a given X index\")]),t._v(\" \"),r(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"❌\")])]),t._v(\" \"),r(\"tr\",[r(\"td\",[r(\"a\",{attrs:{href:\"GridPosToWorldCenterY\"}},[t._v(\"float GridPosToWorldCenterY(int_1)\")])]),t._v(\" \"),r(\"td\",[t._v(\"Get the Y position of the center of a given Y index\")]),t._v(\" \"),r(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"❌\")])]),t._v(\" \"),r(\"tr\",[r(\"td\",[r(\"a\",{attrs:{href:\"IsBlocked\"}},[t._v(\"bool IsBlocked(Vector_1)\")])]),t._v(\" \"),r(\"td\",[t._v(\"Checks whether the given position is blocked\")]),t._v(\" \"),r(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"❌\")])]),t._v(\" \"),r(\"tr\",[r(\"td\",[r(\"a\",{attrs:{href:\"IsNearbyTree\"}},[t._v(\"bool IsNearbyTree(Vector_1, float_2, bool_3)\")])]),t._v(\" \"),r(\"td\",[t._v(\"(position, radius, checkFullTreeRadius?) Checks whether there are any trees overlapping the given point\")]),t._v(\" \"),r(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"❌\")])]),t._v(\" \"),r(\"tr\",[r(\"td\",[r(\"a\",{attrs:{href:\"IsTraversable\"}},[t._v(\"bool IsTraversable(Vector_1)\")])]),t._v(\" \"),r(\"td\",[t._v(\"Checks whether the given position is traversable\")]),t._v(\" \"),r(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"❌\")])]),t._v(\" \"),r(\"tr\",[r(\"td\",[r(\"a\",{attrs:{href:\"RegrowAllTrees\"}},[t._v(\"void RegrowAllTrees()\")])]),t._v(\" \"),r(\"td\",[t._v(\"Causes all trees in the map to regrow\")]),t._v(\" \"),r(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"❌\")])]),t._v(\" \"),r(\"tr\",[r(\"td\",[r(\"a\",{attrs:{href:\"WorldToGridPosX\"}},[t._v(\"int WorldToGridPosX(float_1)\")])]),t._v(\" \"),r(\"td\",[t._v(\"Get the X index of a given world X position\")]),t._v(\" \"),r(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"❌\")])]),t._v(\" \"),r(\"tr\",[r(\"td\",[r(\"a\",{attrs:{href:\"WorldToGridPosY\"}},[t._v(\"int WorldToGridPosY(float_1)\")])]),t._v(\" \"),r(\"td\",[t._v(\"Get the Y index of a given world Y position\")]),t._v(\" \"),r(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"❌\")])])])])])}),[],!1,null,null,null);e.default=a.exports}}]);","extractedComments":[]}